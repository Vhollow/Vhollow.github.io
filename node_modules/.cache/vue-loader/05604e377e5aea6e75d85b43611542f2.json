{"remainingRequest":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\demo\\docs\\Plugins\\BlogComponentsPage.vue?vue&type=template&id=7c4d5068&","dependencies":[{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\demo\\docs\\Plugins\\BlogComponentsPage.vue","mtime":1632149272943},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxtZGItY29udGFpbmVyPgogIDxtZGItcm93IGNsYXNzPSJtdC01IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtc3RhcnQiPgogICAgPGg0IGNsYXNzPSJkZW1vLXRpdGxlIj48c3Ryb25nPkJsb2cgY29tcG9uZW50czwvc3Ryb25nPjwvaDQ+CiAgICA8YSBocmVmPSJodHRwczovL21kYm9vdHN0cmFwLmNvbS9wbHVnaW5zL3Z1ZS9ibG9nLWNvbXBvbmVudHMvP3V0bV9zb3VyY2U9RGVtb0FwcCZ1dG1fbWVkaXVtPU1EQlZ1ZUZyZWUiIHdhdmVzLWZpeGVkIGNsYXNzPSJib3JkZXIgZ3JleS10ZXh0IHB4LTIgYm9yZGVyLWxpZ2h0IHJvdW5kZWQgbWwtMiIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICA8bWRiLWljb24gaWNvbj0iZ3JhZHVhdGlvbi1jYXAiIGNsYXNzPSJtci0yIi8+RG9jcwogICAgPC9hPgogIDwvbWRiLXJvdz4KICA8aHIgY2xhc3M9Im1iLTUiIC8+CiAgPHNlY3Rpb24gY2xhc3M9ImRlbW8tc2VjdGlvbiI+CiAgICA8aDQ+QXV0aG9yIEJveCB2LjE8L2g0PgogICAgPHNlY3Rpb24+CiAgICAgIDxtZGItY2FyZC1oZWFkZXIgY2xhc3M9ImJvcmRlci0wIGZvbnQtd2VpZ2h0LWJvbGQgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIj4KICAgICAgICA8cCBjbGFzcz0ibXItNCBtYi0wIj5BYm91dCB0aGUgYXV0aG9yPC9wPgogICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBsaXN0LWlubGluZSBtYi0wIj4KICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+PGEgaHJlZj0iIiBjbGFzcz0ibXItMyI+PG1kYi1pY29uIGljb249ImVudmVsb3BlIiBjbGFzcz0ibXItMSIgLz5TZW5kIG1lc3NhZ2U8L2E+PC9saT4KICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+PGEgaHJlZj0iIiBjbGFzcz0ibXItMyI+PG1kYi1pY29uIGljb249InVzZXIiIGNsYXNzPSJtci0xIiAvPlNlZSBwcm9maWxlPC9hPjwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPjxhIGhyZWY9IiIgY2xhc3M9Im1yLTMiPjxtZGItaWNvbiBpY29uPSJyc3MiIGNsYXNzPSJtci0xIiAvPkZvbGxvdzwvYT48L2xpPgogICAgICAgIDwvdWw+CiAgICAgIDwvbWRiLWNhcmQtaGVhZGVyPgogICAgICA8bWRiLW1lZGlhIGNsYXNzPSJtdC00IHB4LTEiPgogICAgICAgIDxpbWcgY2xhc3M9ImNhcmQtaW1nLTEwMCBkLWZsZXggei1kZXB0aC0xIG1yLTMiIHNyYz0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyUyMCg4KS5qcGciIGFsdD0iR2VuZXJpYyBwbGFjZWhvbGRlciBpbWFnZSI+CiAgICAgICAgPG1kYi1tZWRpYS1ib2R5PgogICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG10LTAiPgogICAgICAgICAgICA8YSBocmVmPSIiPkRhbm55IE5ld21hbjwvYT4KICAgICAgICAgIDwvaDU+CiAgICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gUXVvZCBjb25zZWN0ZXR1ciBhY2N1c2FtdXMgdmVsaXQgbm9zdHJ1bSBldCBtYWduYW0uCiAgICAgICAgPC9tZGItbWVkaWEtYm9keT4KICAgICAgPC9tZGItbWVkaWE+CiAgICA8L3NlY3Rpb24+CiAgPC9zZWN0aW9uPgogIDxzZWN0aW9uIGNsYXNzPSJkZW1vLXNlY3Rpb24iPgogICAgPGg0PkF1dGhvciBCb3ggdi4yPC9oND4KICAgIDxzZWN0aW9uPgogICAgICA8bWRiLWNhcmQtaGVhZGVyIGNsYXNzPSJib3JkZXItMCBmb250LXdlaWdodC1ib2xkIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICAgICAgPHAgY2xhc3M9Im1yLTQgbWItMCI+QWJvdXQgdGhlIGF1dGhvcjwvcD4KICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbGlzdC1pbmxpbmUgbWItMCI+CiAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPjxhIGhyZWY9IiIgY2xhc3M9InRleHQtZGVmYXVsdCBtci0zIj48bWRiLWljb24gaWNvbj0iZW52ZWxvcGUiIGNsYXNzPSJtci0xIiAvPlNlbmQgbWVzc2FnZTwvYT48L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj48YSBocmVmPSIiIGNsYXNzPSJ0ZXh0LWRlZmF1bHQgbXItMyI+PG1kYi1pY29uIGljb249InVzZXIiIGNsYXNzPSJtci0xIiAvPlNlZSBwcm9maWxlPC9hPjwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Imxpc3QtaW5saW5lLWl0ZW0iPjxhIGhyZWY9IiIgY2xhc3M9InRleHQtZGVmYXVsdCBtci0zIj48bWRiLWljb24gaWNvbj0icnNzIiBjbGFzcz0ibXItMSIgLz5Gb2xsb3c8L2E+PC9saT4KICAgICAgICA8L3VsPgogICAgICA8L21kYi1jYXJkLWhlYWRlcj4KICAgICAgPG1kYi1tZWRpYSBjbGFzcz0ibXQtNCBweC0xIj4KICAgICAgICA8aW1nIGNsYXNzPSJjYXJkLWltZy0xMDAgcm91bmRlZC1jaXJjbGUgZC1mbGV4IHotZGVwdGgtMSBtci0zIiBzcmM9Imh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvQXZhdGFycy9pbWclMjAoOCkuanBnIiBhbHQ9IkdlbmVyaWMgcGxhY2Vob2xkZXIgaW1hZ2UiPgogICAgICAgIDxtZGItbWVkaWEtYm9keT4KICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCBtdC0wIj4KICAgICAgICAgICAgPGEgY2xhc3M9InRleHQtZGVmYXVsdCIgaHJlZj0iIj5EYW5ueSBOZXdtYW48L2E+CiAgICAgICAgICA8L2g1PgogICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIGxpc3QtaW5saW5lIG1iLTIgcHQtMSI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdyZXktdGV4dCBtci0xIj48bWRiLWljb24gZmFiIGljb249ImZhY2Vib29rIiBzaXplPSJsZyIgLz48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibGlzdC1pbmxpbmUtaXRlbSI+CiAgICAgICAgICAgICAgPGEgY2xhc3M9ImdyZXktdGV4dCBtci0xIj48bWRiLWljb24gZmFiIGljb249InR3aXR0ZXIiIHNpemU9ImxnIiAvPjwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ3JleS10ZXh0IG1yLTEiPjxtZGItaWNvbiBmYWIgaWNvbj0iZ29vZ2xlLXBsdXMiIHNpemU9ImxnIiAvPjwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ3JleS10ZXh0IG1yLTEiPjxtZGItaWNvbiBmYWIgaWNvbj0ibGlua2VkaW4iIHNpemU9ImxnIiAvPjwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJsaXN0LWlubGluZS1pdGVtIj4KICAgICAgICAgICAgICA8YSBjbGFzcz0iZ3JleS10ZXh0IG1yLTEiPjxtZGItaWNvbiBmYWIgaWNvbj0iaW5zdGFncmFtIiBzaXplPSJsZyIgLz48L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFF1b2QgY29uc2VjdGV0dXIgYWNjdXNhbXVzIHZlbGl0IG5vc3RydW0gZXQgbWFnbmFtLgogICAgICAgIDwvbWRiLW1lZGlhLWJvZHk+CiAgICAgIDwvbWRiLW1lZGlhPgogICAgPC9zZWN0aW9uPgogIDwvc2VjdGlvbj4KICA8c2VjdGlvbiBjbGFzcz0iZGVtby1zZWN0aW9uIj4KICAgIDxoND5Db21tZW50cyBMaXN0IHYuMTwvaDQ+CiAgICA8c2VjdGlvbj4KICAgICAgPG1kYi1jYXJkLWhlYWRlciBjbGFzcz0iYm9yZGVyLTAgZm9udC13ZWlnaHQtYm9sZCBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPjQgY29tbWVudHM8L21kYi1jYXJkLWhlYWRlcj4KICAgICAgPG1kYi1tZWRpYSBjbGFzcz0iZC1ibG9jayBkLW1kLWZsZXggbXQtNCI+CiAgICAgICAgPGltZyBjbGFzcz0iY2FyZC1pbWctNjQgZC1mbGV4IG14LWF1dG8gbWItMyIgc3JjPSJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL0F2YXRhcnMvaW1nICgyMCkuanBnIiBhbHQ9IkdlbmVyaWMgcGxhY2Vob2xkZXIgaW1hZ2UiPgogICAgICAgIDxtZGItbWVkaWEtYm9keSBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IG1sLW1kLTMgbWwtMCI+CiAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgbXQtMCI+CiAgICAgICAgICAgIDxhIGhyZWY9IiI+TWlsZXkgU3Rld2FyZDwvYT4KICAgICAgICAgICAgPGEgaHJlZj0iIiBjbGFzcz0icHVsbC1yaWdodCI+CiAgICAgICAgICAgICAgPG1kYi1pY29uIGljb249InJlcGx5IiAvPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICA8L2g1PgogICAgICAgICAgRHVpcyBhdXRlIGlydXJlIGRvbG9yIGluIHJlcHJlaGVuZGVyaXQgaW4gdm9sdXB0YXRlIHZlbGl0IGVzc2UgY2lsbHVtIGRvbG9yZSBldSBmdWdpYXQgbnVsbGEgcGFyaWF0dXIuCiAgICAgICAgICBFeGNlcHRldXIgc2ludCBvY2NhZWNhdAogICAgICAgICAgY3VwaWRhdGF0IG5vbiBwcm9pZGVudCwgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXQgYW5pbSBpZCBlc3QgbGFib3J1bS4KICAgICAgICAgIDxtZGItbWVkaWEgY2xhc3M9ImQtYmxvY2sgZC1tZC1mbGV4IG10LTQiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJjYXJkLWltZy02NCBkLWZsZXggbXgtYXV0byBtYi0zIiBzcmM9Imh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvQXZhdGFycy9pbWcgKDI3KS5qcGciIGFsdD0iR2VuZXJpYyBwbGFjZWhvbGRlciBpbWFnZSI+CiAgICAgICAgICAgIDxtZGItbWVkaWEtYm9keSBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IG1sLW1kLTMgbWwtMCI+CiAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG10LTAiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iIj5Ub21teSBTbWl0aDwvYT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9InB1bGwtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8bWRiLWljb24gaWNvbj0icmVwbHkiIC8+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICBTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sCiAgICAgICAgICAgICAgdG90YW0gcmVtIGFwZXJpYW0sIGVhcXVlCiAgICAgICAgICAgICAgaXBzYSBxdWFlIGFiIGlsbG8gaW52ZW50b3JlIHZlcml0YXRpcyBldCBxdWFzaSBhcmNoaXRlY3RvIGJlYXRhZSB2aXRhZSBkaWN0YSBzdW50IGV4cGxpY2Fiby4KICAgICAgICAgICAgPC9tZGItbWVkaWEtYm9keT4KICAgICAgICAgIDwvbWRiLW1lZGlhPgogICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBtdC00Ij4KICAgICAgICAgICAgPGxhYmVsIGZvcj0icXVpY2tSZXBseUZvcm1Db21tZW50Ij5Zb3VyIGNvbW1lbnQ8L2xhYmVsPgogICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InF1aWNrUmVwbHlGb3JtQ29tbWVudCIgcm93cz0iNSI+PC90ZXh0YXJlYT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIG15LTQiPgogICAgICAgICAgICAgIDxtZGItYnRuIGNvbG9yPSJwcmltYXJ5IiBzaXplPSJzbSI+UG9zdDwvbWRiLWJ0bj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxtZGItbWVkaWEgY2xhc3M9ImQtYmxvY2sgZC1tZC1mbGV4IG10LTQiPgogICAgICAgICAgICA8aW1nIGNsYXNzPSJjYXJkLWltZy02NCBkLWZsZXggbXgtYXV0byBtYi0zIiBzcmM9Imh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvQXZhdGFycy9pbWcgKDIxKS5qcGciIGFsdD0iR2VuZXJpYyBwbGFjZWhvbGRlciBpbWFnZSI+CiAgICAgICAgICAgIDxtZGItbWVkaWEtYm9keSBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IG1sLW1kLTMgbWwtMCI+CiAgICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG10LTAiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iIj5TeWx2ZXN0ZXIgdGhlIENhdDwvYT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9InB1bGwtcmlnaHQiPgogICAgICAgICAgICAgICAgICA8bWRiLWljb24gaWNvbj0icmVwbHkiIC8+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICBOZXF1ZSBwb3JybyBxdWlzcXVhbSBlc3QsIHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyLCBhZGlwaXNjaSB2ZWxpdCwgc2VkCiAgICAgICAgICAgICAgcXVpYSBub24gbnVtcXVhbSBlaXVzIG1vZGkKICAgICAgICAgICAgICB0ZW1wb3JhIGluY2lkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmFtIGFsaXF1YW0gcXVhZXJhdCB2b2x1cHRhdGVtLgogICAgICAgICAgICA8L21kYi1tZWRpYS1ib2R5PgogICAgICAgICAgPC9tZGItbWVkaWE+CiAgICAgICAgPC9tZGItbWVkaWEtYm9keT4KICAgICAgPC9tZGItbWVkaWE+CiAgICAgIDxtZGItbWVkaWEgY2xhc3M9ImQtYmxvY2sgZC1tZC1mbGV4IG10LTQiPgogICAgICAgIDxpbWcgY2xhc3M9ImNhcmQtaW1nLTY0IGQtZmxleCBteC1hdXRvIG1iLTMiIHNyYz0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyAoMzApLmpwZyIgYWx0PSJHZW5lcmljIHBsYWNlaG9sZGVyIGltYWdlIj4KICAgICAgICA8bWRiLW1lZGlhLWJvZHkgY2xhc3M9InRleHQtY2VudGVyIHRleHQtbWQtbGVmdCBtbC1tZC0zIG1sLTAiPgogICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG10LTAiPgogICAgICAgICAgICA8YSBocmVmPSIiPkNhcm9saW5lIEhvcndpdHo8L2E+CiAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9InB1bGwtcmlnaHQiPgogICAgICAgICAgICAgIDxtZGItaWNvbiBpY29uPSJyZXBseSIgLz4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgPC9oNT4KICAgICAgICAgIEF0IHZlcm8gZW9zIGV0IGFjY3VzYW11cyBldCBpdXN0byBvZGlvIGRpZ25pc3NpbW9zIGR1Y2ltdXMgcXVpIGJsYW5kaXRpaXMgcHJhZXNlbnRpdW0gdm9sdXB0YXR1bSBkZWxlbml0aQogICAgICAgICAgYXRxdWUgY29ycnVwdGkKICAgICAgICAgIHF1b3MgZG9sb3JlcyBldCBxdWFzIG1vbGVzdGlhcyBleGNlcHR1cmkgc2ludCBvY2NhZWNhdGkgY3VwaWRpdGF0ZSBub24gcHJvdmlkZW50LCBzaW1pbGlxdWUgc3VudCBpbiBjdWxwYQogICAgICAgICAgb2ZmaWNpYSBkZXNlcnVudCBtb2xsaXRpYSBhbmltaSwgaWQgZXN0IGxhYm9ydW0gZXQgZG9sb3J1bSBmdWdhLgogICAgICAgIDwvbWRiLW1lZGlhLWJvZHk+CiAgICAgIDwvbWRiLW1lZGlhPgogICAgICA8bWRiLXBhZ2luYXRpb24gY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIG10LTUiPgogICAgICAgIDxtZGItcGFnZS1pdGVtPkZpcnN0PC9tZGItcGFnZS1pdGVtPgogICAgICAgIDxtZGItcGFnZS1uYXYgcHJldj48L21kYi1wYWdlLW5hdj4KICAgICAgICA8bWRiLXBhZ2UtaXRlbSBhY3RpdmU+MTwvbWRiLXBhZ2UtaXRlbT4KICAgICAgICA8bWRiLXBhZ2UtaXRlbT4yPC9tZGItcGFnZS1pdGVtPgogICAgICAgIDxtZGItcGFnZS1pdGVtPjM8L21kYi1wYWdlLWl0ZW0+CiAgICAgICAgPG1kYi1wYWdlLWl0ZW0+NDwvbWRiLXBhZ2UtaXRlbT4KICAgICAgICA8bWRiLXBhZ2UtaXRlbT41PC9tZGItcGFnZS1pdGVtPgogICAgICAgIDxtZGItcGFnZS1uYXYgbmV4dD48L21kYi1wYWdlLW5hdj4KICAgICAgICA8bWRiLXBhZ2UtaXRlbT5MYXN0PC9tZGItcGFnZS1pdGVtPgogICAgICA8L21kYi1wYWdpbmF0aW9uPgogICAgPC9zZWN0aW9uPgogIDwvc2VjdGlvbj4KICA8c2VjdGlvbiBjbGFzcz0iZGVtby1zZWN0aW9uIj4KICAgIDxoND5SZXBseSBGb3JtIHYuMTwvaDQ+CiAgICA8c2VjdGlvbj4KICAgICAgPG1kYi1jYXJkLWhlYWRlciBjbGFzcz0iYm9yZGVyLTAgZm9udC13ZWlnaHQtYm9sZCBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPkxlYXZlIGEgcmVwbHk8L21kYi1jYXJkLWhlYWRlcj4KICAgICAgPGZvcm0gY2xhc3M9InB4LTEgbXQtNCI+CgogICAgICA8IS0tIENvbW1lbnQgLS0+CiAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgIDxsYWJlbCBmb3I9InJlcGx5Rm9ybUNvbW1lbnQiPllvdXIgY29tbWVudDwvbGFiZWw+CiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJyZXBseUZvcm1Db21tZW50IiByb3dzPSI1Ij48L3RleHRhcmVhPgogICAgICA8L2Rpdj4KCiAgICAgIDwhLS0gTmFtZSAtLT4KICAgICAgPGxhYmVsIGZvcj0icmVwbHlGb3JtTmFtZSI+WW91ciBuYW1lPC9sYWJlbD4KICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBpZD0icmVwbHlGb3JtTmFtZSIgY2xhc3M9ImZvcm0tY29udHJvbCI+CgogICAgICA8YnI+CgogICAgICA8IS0tIEVtYWlsIC0tPgogICAgICA8bGFiZWwgZm9yPSJyZXBseUZvcm1FbWFpbCI+WW91ciBlLW1haWw8L2xhYmVsPgogICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJyZXBseUZvcm1FbWFpbCIgY2xhc3M9ImZvcm0tY29udHJvbCI+CgogICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciBtdC00Ij4KICAgICAgICA8bWRiLWJ0biBjb2xvcj0icHJpbWFyeSIgc2l6ZT0ibWQiPlBvc3Q8L21kYi1idG4+CiAgICAgIDwvZGl2PgoKICAgIDwvZm9ybT4KICAgIDwhLS0gRGVmYXVsdCBmb3JtIHJlcGx5IC0tPgogICAgPC9zZWN0aW9uPgogIDwvc2VjdGlvbj4KICA8c2VjdGlvbiBjbGFzcz0iZGVtby1zZWN0aW9uIj4KICAgIDxoND5SZXBseSBGb3JtIHYuMzwvaDQ+CiAgICA8c2VjdGlvbj4KICAgICAgPCEtLSBSZXBseSBmb3JtIC0tPgogICAgICA8Zm9ybSBjbGFzcz0ibXQtNCI+CgogICAgICAgIDxkaXYgY2xhc3M9ImQtbWQtZmxleCBmbGV4LW1kLWZpbGwiPgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGlucHV0LWdyb3VwLW1kIHB4LTIgbWItNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLXByZXBlbmQiPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC10ZXh0IHdoaXRlIGdyZXktdGV4dCIgaWQ9ImJhc2ljLWFkZG9uOSI+MTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIG10LTAgYmxhY2stYm9yZGVyIHJnYmEtd2hpdGUtc3Ryb25nIiBwbGFjZWhvbGRlcj0iVXNlcm5hbWUiCiAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT0iYmFzaWMtYWRkb245Ij4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtbWQgcHgtMiBtYi00Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtcHJlcGVuZCI+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LWdyb3VwLXRleHQgd2hpdGUgZ3JleS10ZXh0IiBpZD0iYmFzaWMtYWRkb24xMCI+Mjwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIG10LTAgYmxhY2stYm9yZGVyIHJnYmEtd2hpdGUtc3Ryb25nIiBwbGFjZWhvbGRlcj0iRW1haWwiCiAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT0iYmFzaWMtYWRkb24xMCI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIGlucHV0LWdyb3VwLW1kIHB4LTIgbWItNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlucHV0LWdyb3VwLXByZXBlbmQiPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC10ZXh0IHdoaXRlIGdyZXktdGV4dCIgaWQ9ImJhc2ljLWFkZG9uMTAxIj4zPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbXQtMCBibGFjay1ib3JkZXIgcmdiYS13aGl0ZS1zdHJvbmciIHBsYWNlaG9sZGVyPSJXZWJzaXRlIgogICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9ImJhc2ljLTEiPgogICAgICAgICAgPC9kaXY+CgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIHB4LTIiPgogICAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wgcGwtMyBwdC0zIiBpZD0iZXhhbXBsZUZvcm1Db250cm9sVGV4dGFyZWExIiByb3dzPSI2IiBwbGFjZWhvbGRlcj0iV3JpdGUgc29tZXRoaW5nIGhlcmUuLi4iPjwvdGV4dGFyZWE+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIG10LTQiPgogICAgICAgICAgPG1kYi1idG4gY29sb3I9InByaW1hcnkiIHNpemU9Im1kIj5TdWJtaXQ8L21kYi1idG4+CiAgICAgICAgPC9kaXY+CgogICAgICA8L2Zvcm0+CiAgICAgIDwhLS0gUmVwbHkgZm9ybSAtLT4KICAgIDwvc2VjdGlvbj4KICA8L3NlY3Rpb24+CiAgPHNlY3Rpb24gY2xhc3M9ImRlbW8tc2VjdGlvbiI+CiAgICA8aDQ+UmVwbHkgRm9ybSAobG9nZ2VkIGluIHVzZXIpIHYuMTwvaDQ+CiAgICA8c2VjdGlvbj4KICAgICAgPG1kYi1jYXJkLWhlYWRlciBjbGFzcz0iYm9yZGVyLTAgZm9udC13ZWlnaHQtYm9sZCBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4iPkxlYXZlIGEgcmVwbHkgKGxvZ2dlZCBpbiB1c2VyKTwvbWRiLWNhcmQtaGVhZGVyPgogICAgICA8ZGl2IGNsYXNzPSJkLW1kLWZsZXggZmxleC1tZC1maWxsIG10LTQgcHgtMSI+CiAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgbXItbWQtNSI+CiAgICAgICAgICA8aW1nIGNsYXNzPSJjYXJkLWltZy0xMDAgei1kZXB0aC0xIG1iLTQiIHNyYz0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyAoMzIpLmpwZyIKICAgICAgICAgICAgYWx0PSJhdmF0YXIiPgogICAgICAgIDwvZGl2PgogICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIHBsLTMgcHQtMyIgaWQ9ImV4YW1wbGVGb3JtQ29udHJvbFRleHRhcmVhMSIgcm93cz0iNiIgcGxhY2Vob2xkZXI9IldyaXRlIHNvbWV0aGluZyBoZXJlLi4uIj48L3RleHRhcmVhPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbXQtNCI+CiAgICAgICAgPG1kYi1idG4gY29sb3I9InByaW1hcnkiIHNpemU9Im1kIj5TdWJtaXQ8L21kYi1idG4+CiAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogIDwvc2VjdGlvbj4KPC9tZGItY29udGFpbmVyPgo="},null]}