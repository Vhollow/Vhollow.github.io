{"remainingRequest":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\demo\\docs\\LiveDemoPage.vue?vue&type=template&id=50f09274&scoped=true&","dependencies":[{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\demo\\docs\\LiveDemoPage.vue","mtime":1632149272890},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\vicen\\OneDrive\\Documentos\\GitHub\\Vhollow.github.io\\mdbvue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJtZGItY29udGFpbmVyIiwgWwogICAgX2MoImgxIiwgW192bS5fdigiTUQgQm9vdHN0cmFwIENvbXBvbmVudHMiKV0pLAogICAgX2MoInAiLCBbCiAgICAgIF92bS5fdigKICAgICAgICAiVGhpcyBwcmVzZW50YXRpb24gc2hvd3MgZmlyc3QgcGFydCBvZiBjb21wb25lbnRzIGFuZCBmZWF0dXJlcyBhdmFpbGFibGUgaW4gTURCIFZ1ZS5qcyIKICAgICAgKQogICAgXSksCiAgICBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJCdXR0b25zIildKSwKICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCJCYXNpYyBidXR0b25zIildKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9IH0sIFtfdm0uX3YoIlByaW1hcnkiKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgW192bS5fdigiRGVmYXVsdCIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAic2Vjb25kYXJ5IiB9IH0sIFtfdm0uX3YoIlNlY29uZGFyeSIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAic3VjY2VzcyIgfSB9LCBbX3ZtLl92KCJTdWNjZXNzIildKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJpbmZvIiB9IH0sIFtfdm0uX3YoIkluZm8iKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogIndhcm5pbmciIH0gfSwgW192bS5fdigiV2FybmluZyIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiZGFuZ2VyIiB9IH0sIFtfdm0uX3YoIkRhbmdlciIpXSksCiAgICAgICAgX2MoImg1IiwgW192bS5fdigiQWRkaXRpb25hbCBidXR0b25zIildKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJlbGVnYW50IiB9IH0sIFtfdm0uX3YoIkVsZWdhbnQiKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogInVuaXF1ZSIgfSB9LCBbX3ZtLl92KCJVbmlxdWUiKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogInBpbmsiIH0gfSwgW192bS5fdigiUGluayIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHVycGxlIiB9IH0sIFtfdm0uX3YoIlB1cnBsZSIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiZGVlcC1wdXJwbGUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJEZWVwLXB1cnBsZSIpCiAgICAgICAgXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiaW5kaWdvIiB9IH0sIFtfdm0uX3YoIkluZGlnbyIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAibGlnaHQtYmx1ZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkxpZ2h0LWJsdWUiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogImN5YW4iIH0gfSwgW192bS5fdigiQ3lhbiIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiZGFyay1ncmVlbiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkRhcmstZ3JlZW4iKQogICAgICAgIF0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogImxpZ2h0LWdyZWVuIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiTGlnaHQtZ3JlZW4iKQogICAgICAgIF0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogInllbGxvdyIgfSB9LCBbX3ZtLl92KCJZZWxsb3ciKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogImFtYmVyIiB9IH0sIFtfdm0uX3YoIkFtYmVyIildKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJkZWVwLW9yYW5nZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkRlZXAtb3JhbmdlIikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJicm93biIgfSB9LCBbX3ZtLl92KCJCcm93biIpXSksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiZ3JleSIgfSB9LCBbX3ZtLl92KCJHcmV5IildKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJtZGIiIH0gfSwgW192bS5fdigiTWRiIildKSwKICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCJPdXRsaW5lIGJ1dHRvbnMiKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBvdXRsaW5lOiAicHJpbWFyeSIsIGRhcmtXYXZlczogIiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlByaW1hcnkiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBvdXRsaW5lOiAiZGVmYXVsdCIsIGRhcmtXYXZlczogIiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkRlZmF1bHQiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBvdXRsaW5lOiAic2Vjb25kYXJ5IiwgZGFya1dhdmVzOiAiIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiU2Vjb25kYXJ5IikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgb3V0bGluZTogInN1Y2Nlc3MiLCBkYXJrV2F2ZXM6ICIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJTdWNjZXNzIikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgb3V0bGluZTogImluZm8iLCBkYXJrV2F2ZXM6ICIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJJbmZvIikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgb3V0bGluZTogIndhcm5pbmciLCBkYXJrV2F2ZXM6ICIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJXYXJuaW5nIikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgb3V0bGluZTogImRhbmdlciIsIGRhcmtXYXZlczogIiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkRhbmdlciIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImg1IiwgW192bS5fdigiU2l6ZXMiKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBzaXplOiAibGciIH0gfSwgW192bS5fdigiTGFyZ2UgYnV0dG9uIildKSwKICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgc2l6ZTogImxnIiB9IH0sIFtfdm0uX3YoIkxhcmdlIGJ1dHRvbiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IHNpemU6ICJzbSIgfSB9LCBbX3ZtLl92KCJTbWFsbCBidXR0b24iKV0pLAogICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBzaXplOiAic20iIH0gfSwgW192bS5fdigiU21hbGwgYnV0dG9uIildKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogIm10LTQiIH0pLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiQmFkZ2VzIildKSwKICAgICAgICBfYygibWRiLWJhZGdlIiwgeyBhdHRyczogeyBjb2xvcjogInByaW1hcnktY29sb3IiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJQcmltYXJ5IikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJhZGdlIiwgeyBhdHRyczogeyBjb2xvcjogImRlZmF1bHQtY29sb3IiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJEZWZhdWx0IikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJhZGdlIiwgeyBhdHRyczogeyBjb2xvcjogInN1Y2Nlc3MtY29sb3IiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJTdWNjZXNzIikKICAgICAgICBdKSwKICAgICAgICBfYygibWRiLWJhZGdlIiwgeyBhdHRyczogeyBjb2xvcjogImluZm8tY29sb3IiIH0gfSwgW192bS5fdigiSW5mbyIpXSksCiAgICAgICAgX2MoIm1kYi1iYWRnZSIsIHsgYXR0cnM6IHsgY29sb3I6ICJ3YXJuaW5nLWNvbG9yIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiV2FybmluZyIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImg1IiwgW192bS5fdigiUGlsbHMgd2l0aCBGb250IEF3ZXNvbWUiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1iYWRnZSIsCiAgICAgICAgICB7IGF0dHJzOiB7IHBpbGw6ICIiLCBjb2xvcjogInByaW1hcnktY29sb3IiIH0gfSwKICAgICAgICAgIFtfYygibWRiLWljb24iLCB7IGF0dHJzOiB7IGljb246ICJzbm93Zmxha2UtbyIgfSB9KV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItYmFkZ2UiLAogICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImRlZmF1bHQtY29sb3IiLCBwaWxsOiAiIiB9IH0sCiAgICAgICAgICBbX2MoIm1kYi1pY29uIiwgeyBhdHRyczogeyBpY29uOiAiaGFuZC1zcG9jay1vIiB9IH0pXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1iYWRnZSIsCiAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAic3VjY2Vzcy1jb2xvciIsIHBpbGw6ICIiIH0gfSwKICAgICAgICAgIFtfYygibWRiLWljb24iLCB7IGF0dHJzOiB7IGljb246ICJpbWFnZSIgfSB9KV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItYmFkZ2UiLAogICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImluZm8tY29sb3IiLCBwaWxsOiAiIiB9IH0sCiAgICAgICAgICBbX2MoIm1kYi1pY29uIiwgeyBhdHRyczogeyBpY29uOiAibW9ydGFyLWJvYXJkIiB9IH0pXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1iYWRnZSIsCiAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAid2FybmluZy1jb2xvciIsIHBpbGw6ICIiIH0gfSwKICAgICAgICAgIFtfYygibWRiLWljb24iLCB7IGF0dHJzOiB7IGljb246ICJwYWludC1icnVzaCIgfSB9KV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogIm10LTQiIH0pLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIk5hdmJhcnMiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1uYXZiYXIiLAogICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogInByaW1hcnkiLCBkYXJrOiAiIiwgbmFtZTogIk5hdmJhciIsIGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbmF2YmFyLXRvZ2dsZXIiLAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLW5hdmJhci1uYXYiLAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1uYXYtaXRlbSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiLCBhY3RpdmU6ICIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJIb21lIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLW5hdi1pdGVtIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkZlYXR1cmVzIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLW5hdi1pdGVtIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlByaWNpbmciKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1kcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iLCBhdHRyczogeyB0YWc6ICJsaSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZMaW5rOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIndhdmVzLWZpeGVkIjogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAidG9nZ2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiRHJvcGRvd24iKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi1tZW51IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBY3Rpb24iKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1kcm9wZG93bi1pdGVtIiwgW192bS5fdigiQW5vdGhlciBhY3Rpb24iKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1kcm9wZG93bi1pdGVtIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlNvbWV0aGluZyBlbHNlIGhlcmUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZm9ybS1pbmxpbmUiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIlNlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIlNlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgbmF2SW5wdXQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICB3YXZlczogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbmF2YmFyIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtdC00IiwKICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJkZWZhdWx0IiwgZGFyazogIiIsIG5hbWU6ICJOYXZiYXIiLCBocmVmOiAiIyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1uYXZiYXItdG9nZ2xlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItbmF2YmFyLW5hdiIsCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLW5hdi1pdGVtIiwgeyBhdHRyczogeyBocmVmOiAiIyIsIGFjdGl2ZTogIiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkhvbWUiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJtZGItbmF2LWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRmVhdHVyZXMiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJtZGItbmF2LWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJpY2luZyIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIsIGF0dHJzOiB7IHRhZzogImxpIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZGItZHJvcGRvd24tdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAidG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdkxpbms6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogImRlZmF1bHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAid2F2ZXMtZml4ZWQiOiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJ0b2dnbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJEcm9wZG93biIpXQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duLW1lbnUiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICJkZWZhdWx0IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1kcm9wZG93bi1pdGVtIiwgW192bS5fdigiQWN0aW9uIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFub3RoZXIgYWN0aW9uIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTb21ldGhpbmcgZWxzZSBoZXJlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItbmF2YmFyLW5hdiIsCiAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgcmlnaHQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1uYXYtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbX2MoIm1kYi1pY29uIiwgeyBhdHRyczogeyBpY29uOiAidHdpdHRlciIgfSB9KV0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItbmF2LWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgW19jKCJtZGItaWNvbiIsIHsgYXR0cnM6IHsgaWNvbjogImdvb2dsZS1wbHVzIiB9IH0pXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1kcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iLCBhdHRyczogeyB0YWc6ICJsaSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZMaW5rOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJkZWZhdWx0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIndhdmVzLWZpeGVkIjogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAidG9nZ2xlIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJtZGItaWNvbiIsIHsgYXR0cnM6IHsgaWNvbjogInVzZXIiIH0gfSldLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi1tZW51IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiZGVmYXVsdCIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBbm90aGVyIGFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU29tZXRoaW5nIGVsc2UgaGVyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLW5hdmJhciIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtNCIsCiAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiZGFuZ2VyIiwgZGFyazogIiIsIG5hbWU6ICJOYXZiYXIiLCBocmVmOiAiIyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1uYXZiYXItdG9nZ2xlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIm1kYi1uYXZiYXItbmF2IiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1uYXZiYXItbmF2IiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyByaWdodDogIiIgfSB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLW5hdi1pdGVtIiwKICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pY29uIiwgeyBhdHRyczogeyBpY29uOiAiZW52ZWxvcGUiIH0gfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIENvbnRhY3QiKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1uYXYtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItaWNvbiIsIHsgYXR0cnM6IHsgaWNvbjogImNvZyIgfSB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU2V0dGluZ3MiKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1kcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iLCBhdHRyczogeyB0YWc6ICJsaSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvdDogInRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZMaW5rOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJkYW5nZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAid2F2ZXMtZml4ZWQiOiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJ0b2dnbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWljb24iLCB7IGF0dHJzOiB7IGljb246ICJ1c2VyIiB9IH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUHJvZmlsZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZGItZHJvcGRvd24tbWVudSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImRhbmdlciIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBbm90aGVyIGFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU29tZXRoaW5nIGVsc2UgaGVyZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoImg1IiwgW192bS5fdigiQnJlYWRjcnVtYnMiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1icmVhZGNydW1iIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm1kYi1icmVhZGNydW1iLWl0ZW0iLCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoIk1lbnUiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibWRiLWJyZWFkY3J1bWItaXRlbSIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgW192bS5fdigiTmF2IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoIm1kYi1icmVhZGNydW1iLWl0ZW0iLCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFtfdm0uX3YoIkVsZW1lbnRzIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoIm1kYi1icmVhZGNydW1iLWl0ZW0iLCB7IGF0dHJzOiB7IGFjdGl2ZTogIiIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJFbGVtZW50IDEiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0sCiAgICAgIDEKICAgICksCiAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCIgfSksCiAgICBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJEcm9wZG93bnMiKV0pLAogICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIkJhc2ljIGV4YW1wbGVzIildKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItZHJvcGRvd24iLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBzbG90OiAidG9nZ2xlIiwgY29sb3I6ICJkZWZhdWx0IiB9LCBzbG90OiAidG9nZ2xlIiB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkRyb3Bkb3duIDEiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi1tZW51IiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiZGVmYXVsdCIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBbm90aGVyIGFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJTb21ldGhpbmcgZWxzZSBoZXJlIildKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLWRyb3Bkb3duIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi10b2dnbGUiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgc2xvdDogInRvZ2dsZSIsIGNvbG9yOiAicHJpbWFyeSIgfSwgc2xvdDogInRvZ2dsZSIgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJEcm9wZG93biAyIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItZHJvcGRvd24tbWVudSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogInByaW1hcnkiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBY3Rpb24iKV0pLAogICAgICAgICAgICAgICAgX2MoIm1kYi1kcm9wZG93bi1pdGVtIiwgW192bS5fdigiQW5vdGhlciBhY3Rpb24iKV0pLAogICAgICAgICAgICAgICAgX2MoIm1kYi1kcm9wZG93bi1pdGVtIiwgW192bS5fdigiU29tZXRoaW5nIGVsc2UgaGVyZSIpXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1kcm9wZG93biIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItZHJvcGRvd24tdG9nZ2xlIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHNsb3Q6ICJ0b2dnbGUiLCBjb2xvcjogInNlY29uZGFyeSIgfSwgc2xvdDogInRvZ2dsZSIgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJEcm9wZG93biAzIildCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItZHJvcGRvd24tbWVudSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogInNlY29uZGFyeSIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBbm90aGVyIGFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJTb21ldGhpbmcgZWxzZSBoZXJlIildKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLWRyb3Bkb3duIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi10b2dnbGUiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgc2xvdDogInRvZ2dsZSIsIGNvbG9yOiAiZGFuZ2VyIiB9LCBzbG90OiAidG9nZ2xlIiB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkRyb3Bkb3duIDQiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi1tZW51IiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiZGFuZ2VyIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIm1kYi1kcm9wZG93bi1pdGVtIiwgW192bS5fdigiQWN0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFub3RoZXIgYWN0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIlNvbWV0aGluZyBlbHNlIGhlcmUiKV0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItZHJvcGRvd24iLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWRyb3Bkb3duLXRvZ2dsZSIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBzbG90OiAidG9nZ2xlIiwgY29sb3I6ICJ3YXJuaW5nIiB9LCBzbG90OiAidG9nZ2xlIiB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIkRyb3Bkb3duIDUiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1kcm9wZG93bi1tZW51IiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAid2FybmluZyIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJtZGItZHJvcGRvd24taXRlbSIsIFtfdm0uX3YoIkFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJBbm90aGVyIGFjdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWRyb3Bkb3duLWl0ZW0iLCBbX3ZtLl92KCJTb21ldGhpbmcgZWxzZSBoZXJlIildKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiB9KSwKICAgIF9jKAogICAgICAic2VjdGlvbiIsCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJDYXJkcyIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXJvdyIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IHNtOiAiNCIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWNhcmQiLAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1jYXJkLWltYWdlIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL0hvcml6b250YWwvTmF0dXJlLzQtY29sL2ltZyUyMCUyODIlMjkuanBnIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiQ2FyZCBpbWFnZSBjYXAiLAogICAgICAgICAgICAgICAgICAgICAgICB3YXZlczogIiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItY2FyZC1ib2R5IiwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkNhcmQgd2l0aCB3YXZlcyBlZmZlY3QiKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJCdXR0b24iKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgc206ICI0IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItY2FyZCIsCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWNhcmQtaW1hZ2UiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvSG9yaXpvbnRhbC9OYXR1cmUvNC1jb2wvaW1nJTIwJTI4NiUyOS5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJDYXJkIGltYWdlIGNhcCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItY2FyZC1ib2R5IiwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkJhc2ljIGNhcmQiKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNvbWUgcXVpY2sgZXhhbXBsZSB0ZXh0IHRvIGJ1aWxkIG9uIHRoZSBjYXJkIHRpdGxlIGFuZCBtYWtlIHVwIHRoZSBidWxrIG9mIHRoZSBjYXJkJ3MgY29udGVudC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJCdXR0b24iKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgc206ICI0IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItY2FyZCIsCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWNhcmQtaW1hZ2UiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvSG9yaXpvbnRhbC9OYXR1cmUvNC1jb2wvaW1nJTIwJTI4NyUyOS5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJDYXJkIGltYWdlIGNhcCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHdhdmVzOiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1jYXJkLWJvZHkiLAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiQ2FyZCB3aXRoIHdhdmVzIGVmZmVjdCIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiU29tZSBxdWljayBleGFtcGxlIHRleHQgdG8gYnVpbGQgb24gdGhlIGNhcmQgdGl0bGUgYW5kIG1ha2UgdXAgdGhlIGJ1bGsgb2YgdGhlIGNhcmQncyBjb250ZW50LiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkJ1dHRvbiIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiB9KSwKICAgIF9jKAogICAgICAic2VjdGlvbiIsCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJUYWJsZSIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXRibCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3RyaXBlZDogIiIsCiAgICAgICAgICAgICAgYm9yZGVyZWQ6ICIiLAogICAgICAgICAgICAgIGRhcms6ICIiLAogICAgICAgICAgICAgIGhvdmVyOiAiIiwKICAgICAgICAgICAgICAicmVzcG9uc2l2ZS1sZyI6ICIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJtZGItdGJsLWhlYWQiLCBbCiAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigidGhlYWQgY29sIDEiKV0pLAogICAgICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigidGhlYWQgY29sIDIiKV0pLAogICAgICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigidGhlYWQgY29sIDMiKV0pLAogICAgICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigidGhlYWQgY29sIDQiKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJtZGItdGJsLWJvZHkiLCBbCiAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDEiKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDIiKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDMiKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDQiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDEiKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDIiKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDMiKV0pLAogICAgICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigidGJvZHkgY29sIDQiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgX2MoInRkIiwgeyBhdHRyczogeyBjb2xzcGFuOiAiNCIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigidGJvZHkgY29sIHdpZGUiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0sCiAgICAgIDEKICAgICksCiAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCIgfSksCiAgICBfYygKICAgICAgInNlY3Rpb24iLAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiUGFnaW5hdGlvbiIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXBhZ2luYXRpb24iLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygicGFnZS1uYXYiLCB7IGF0dHJzOiB7IHByZXY6ICIiIH0gfSksCiAgICAgICAgICAgIF9jKCJtZGItcGFnZS1pdGVtIiwgeyBhdHRyczogeyBhY3RpdmU6ICIiIH0gfSwgW192bS5fdigiMSIpXSksCiAgICAgICAgICAgIF9jKCJtZGItcGFnZS1pdGVtIiwgW192bS5fdigiMiIpXSksCiAgICAgICAgICAgIF9jKCJtZGItcGFnZS1pdGVtIiwgW192bS5fdigiMyIpXSksCiAgICAgICAgICAgIF9jKCJtZGItcGFnZS1pdGVtIiwgW192bS5fdigiNCIpXSksCiAgICAgICAgICAgIF9jKCJtZGItcGFnZS1pdGVtIiwgW192bS5fdigiNSIpXSksCiAgICAgICAgICAgIF9jKCJwYWdlLW5hdiIsIHsgYXR0cnM6IHsgbmV4dDogIiIgfSB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0sCiAgICAgIDEKICAgICksCiAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCIgfSksCiAgICBfYygKICAgICAgInNlY3Rpb24iLAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiTWVkaWEiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tZWRpYSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJtZGItbWVkaWEtaW1hZ2UiLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiAiaHR0cDovL3ZpYS5wbGFjZWhvbGRlci5jb20vNjR4NjQiIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJtZGItbWVkaWEtYm9keSIsIFsKICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAibXQtMCB0ZXh0LWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVGhpcyBpcyBoZWFkaW5nIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIkNyYXMgc2l0IGFtZXQgbmliaCBsaWJlcm8sIGluIGdyYXZpZGEgbnVsbGEuIE51bGxhIHZlbCBtZXR1cyBzY2VsZXJpc3F1ZSBhbnRlIHNvbGxpY2l0dWRpbi4gQ3JhcyBwdXJ1cyBvZGlvLCB2ZXN0aWJ1bHVtIGluIHZ1bHB1dGF0ZSBhdCwgdGVtcHVzIHZpdmVycmEgdHVycGlzLiBGdXNjZSBjb25kaW1lbnR1bSBudW5jIGFjIG5pc2kgdnVscHV0YXRlIGZyaW5naWxsYS4gRG9uZWMgbGFjaW5pYSBjb25ndWUgZmVsaXMgaW4gZmF1Y2lidXMuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLW1lZGlhIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm1kYi1tZWRpYS1pbWFnZSIsIHsKICAgICAgICAgICAgICBhdHRyczogeyBzcmM6ICJodHRwOi8vdmlhLnBsYWNlaG9sZGVyLmNvbS82NHg2NCIgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoIm1kYi1tZWRpYS1ib2R5IiwgWwogICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJtdC0wIHRleHQtbGVmdCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJUaGlzIGlzIGFub3RoZXIgaGVhZGluZyIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICJDcmFzIHNpdCBhbWV0IG5pYmggbGliZXJvLCBpbiBncmF2aWRhIG51bGxhLiBOdWxsYSB2ZWwgbWV0dXMgc2NlbGVyaXNxdWUgYW50ZSBzb2xsaWNpdHVkaW4uIENyYXMgcHVydXMgb2RpbywgdmVzdGlidWx1bSBpbiB2dWxwdXRhdGUgYXQsIHRlbXB1cyB2aXZlcnJhIHR1cnBpcy4gRnVzY2UgY29uZGltZW50dW0gbnVuYyBhYyBuaXNpIHZ1bHB1dGF0ZSBmcmluZ2lsbGEuIERvbmVjIGxhY2luaWEgY29uZ3VlIGZlbGlzIGluIGZhdWNpYnVzLiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0sCiAgICAgIDEKICAgICksCiAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCIgfSksCiAgICBfYygKICAgICAgInNlY3Rpb24iLAogICAgICBbCiAgICAgICAgX2MoImgyIiwgW192bS5fdigiTGlzdCBHcm91cHMiKV0pLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1yb3ciLAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWNvbCIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2w6ICIxMiIsIHNtOiAiNCIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWxpc3QtZ3JvdXAiLAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWxpc3QtZ3JvdXAtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSwgYWN0aXZlOiB0cnVlIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk1haW4gTWVudSIpXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWxpc3QtZ3JvdXAtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTWVzc2FnZXMiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1iYWRnZSIsIHsgYXR0cnM6IHsgcGlsbDogdHJ1ZSB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIjEyIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWxpc3QtZ3JvdXAtaXRlbSIsIHsgYXR0cnM6IHsgYWN0aW9uOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZWxsIFByb2R1Y3RzIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWxpc3QtZ3JvdXAtaXRlbSIsIHsgYXR0cnM6IHsgYWN0aW9uOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZXR0aW5ncyIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1saXN0LWdyb3VwLWl0ZW0iLCB7IGF0dHJzOiB7IGRpc2FibGVkOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDYW4ndCBUb3VjaCBUaGlzIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbDogIjEyIiwgc206ICI0IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItbGlzdC1ncm91cCIsCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItbGlzdC1ncm91cC1pdGVtIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbmRpZ28gdGV4dC13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTWFpbiBNZW51IildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWxpc3QtZ3JvdXAtaXRlbSIsIHsgYXR0cnM6IHsgYWN0aW9uOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNZXNzYWdlcyIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1saXN0LWdyb3VwLWl0ZW0iLCB7IGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2VsbCBQcm9kdWN0cyIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWxpc3QtZ3JvdXAtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2V0dGluZ3MiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1kYi1iYWRnZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBwaWxsOiB0cnVlLCBjb2xvcjogImluZGlnbyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjEyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWxpc3QtZ3JvdXAtaXRlbSIsIHsgYXR0cnM6IHsgZGlzYWJsZWQ6IHRydWUgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkNhbid0IFRvdWNoIFRoaXMiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sOiAiMTIiLCBzbTogIjQiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1saXN0LWdyb3VwIiwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1saXN0LWdyb3VwLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNwZWNpYWwtY29sb3IgdGV4dC13aGl0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTWFpbiBNZW51IildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWxpc3QtZ3JvdXAtaXRlbSIsIHsgYXR0cnM6IHsgYWN0aW9uOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNZXNzYWdlcyIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWxpc3QtZ3JvdXAtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGFjdGlvbjogdHJ1ZSB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiU2VsbCBQcm9kdWN0cyIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWJhZGdlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHBpbGw6IHRydWUsIGNvbG9yOiAic3BlY2lhbC1jb2xvciIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjEyIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWxpc3QtZ3JvdXAtaXRlbSIsIHsgYXR0cnM6IHsgYWN0aW9uOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZXR0aW5ncyIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1saXN0LWdyb3VwLWl0ZW0iLCB7IGF0dHJzOiB7IGRpc2FibGVkOiB0cnVlIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJDYW4ndCBUb3VjaCBUaGlzIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogIm10LTQiIH0pLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkNoYXJ0cyIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXJvdyIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicGItNSIsIGF0dHJzOiB7IGNvbDogIjYiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCJMaW5lIENoYXJ0IildKSwKICAgICAgICAgICAgICAgIF9jKCJtZGItbGluZS1jaGFydCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ubGluZUNoYXJ0RGF0YSwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBfdm0ubGluZUNoYXJ0T3B0aW9ucywKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWNvbCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBiLTUiLCBhdHRyczogeyBjb2w6ICI2IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiUmFkYXIgQ2hhcnQiKV0pLAogICAgICAgICAgICAgICAgX2MoIm1kYi1yYWRhci1jaGFydCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ucmFkYXJDaGFydERhdGEsCiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnJhZGFyQ2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgIHdpZHRoOiA2MDAsCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwYi01IiwgYXR0cnM6IHsgY29sOiAiNiIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIkJhciBDaGFydCIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLWJhci1jaGFydCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0uYmFyQ2hhcnREYXRhLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5iYXJDaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwMCwKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWNvbCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBiLTUiLCBhdHRyczogeyBjb2w6ICI2IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiUG9sYXIgQ2hhcnQiKV0pLAogICAgICAgICAgICAgICAgX2MoIm1kYi1wb2xhci1jaGFydCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ucG9sYXJDaGFydERhdGEsCiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnBvbGFyQ2hhcnRPcHRpb25zLAogICAgICAgICAgICAgICAgICAgIHdpZHRoOiA2MDAsCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwYi01IiwgYXR0cnM6IHsgY29sOiAiNiIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIlBpZSBDaGFydCIpXSksCiAgICAgICAgICAgICAgICBfYygibWRiLXBpZS1jaGFydCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ucGllQ2hhcnREYXRhLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5waWVDaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwMCwKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWNvbCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBiLTUiLCBhdHRyczogeyBjb2w6ICI2IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiRG91Z2hudXQgQ2hhcnQiKV0pLAogICAgICAgICAgICAgICAgX2MoIm1kYi1kb3VnaG51dC1jaGFydCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ucGllQ2hhcnREYXRhLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF92bS5waWVDaGFydE9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwMCwKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMAogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiB9KSwKICAgIF9jKAogICAgICAic2VjdGlvbiIsCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJNYXNrcyIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXJvdyIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHktMiIsIGF0dHJzOiB7IGNvbDogIjEyIiwgc206ICI2IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItdmlldyIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9PdGhlcnMvbmF0dXJlLXNtLmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJ2aWV3IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJtZGItbWFzayIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJmbGV4LWNlbnRlciI6ICIiLCB3YXZlczogIiIsIHRleHQ6ICJ3YXZlcyIgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJweS0yIiwgYXR0cnM6IHsgY29sOiAiMTIiLCBzbTogIjYiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi12aWV3IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL090aGVycy9uYXR1cmUtc20uanBnIiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInZpZXciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1tYXNrIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXgtY2VudGVyIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46ICIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ3BhdHRlcm4gPSAiMyInCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLWNvbCIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2w6ICIxMiIsIHNtOiAiNiIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLXZpZXciLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXk6ICJibHVlLXN0cm9uZyIsCiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL090aGVycy9uYXR1cmUtc20uanBnIiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInZpZXciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1tYXNrIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXgtY2VudGVyIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHdhdmVzOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmxheTogImJsdWUtc3Ryb25nIiwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ292ZXJsYXkgPSAiYmx1ZS1zdHJvbmciIHdhdmVzJwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sOiAiMTIiLCBzbTogIjYiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi12aWV3IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL090aGVycy9uYXR1cmUtc20uanBnIiwKICAgICAgICAgICAgICAgICAgICAgIGFsdDogInZpZXciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1tYXNrIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImZsZXgtY2VudGVyIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHdhdmVzOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogIjUiLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAncGF0dGVybiA9ICI1IiB3YXZlcycKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogIm10LTQiIH0pLAogICAgX2MoInNlY3Rpb24iLCBbCiAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkVkZ2UgSGVhZGVyIildKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBiYWNrZ3JvdW5kOiAiI2VkZWRlZCIsICJwYWRkaW5nLWJvdHRvbSI6ICIxMDBweCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJtZGItZWRnZS1oZWFkZXIiLCB7IGF0dHJzOiB7IGNvbG9yOiAiaW5kaWdvIiB9IH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJtZGItY29udGFpbmVyIiwKICAgICAgICAgICAgeyBhdHRyczogeyAiZnJlZS1iaXJkIjogIiIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibWRiLXJvdyIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgIm14LWF1dG8gZmxvYXQtbm9uZSB3aGl0ZSB6LWRlcHRoLTEgcHktMiBweC0yIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG1kOiAiOCIsIGxnOiAiNyIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1jYXJkLWJvZHkiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJoMi1yZXNwb25zaXZlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1hdGVyaWFsIERlc2lnbiBFZGdlIEhlYWRlcnMiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwYi00IHRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJFeGFtcGxlIG9mIE1hdGVyaWFsIERlc2lnbiBGb3JtIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJmb3JtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGFjdGlvbjogIiMiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaDUtcmVzcG9uc2l2ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkJhc2ljIFRleHRib3giKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGxhYmVsOiAiRXhhbXBsZSBsYWJlbCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiaDUtcmVzcG9uc2l2ZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlRleHRib3ggd2l0aCBpY29uIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibWQtZm9ybSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiWW91ciBuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogInVzZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJoNS1yZXNwb25zaXZlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiRS1tYWlsIHZhbGlkYXRpb24iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtZC1mb3JtIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiWW91ciBlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJlbnZlbG9wZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImg1LXJlc3BvbnNpdmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUZXh0YXJlYSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1kLWZvcm0iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLXRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIlRleHRhcmVhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogInBlbmNpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImg1LXJlc3BvbnNpdmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJEaXNhYmxlZCBmaWVsZCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1kLWZvcm0iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIkV4YW1wbGUgbGFiZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXhzLWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJ1dHRvbiIsIHsgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlN1Ym1pdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm15LTIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9udC13ZWlnaHQiOiAiMzAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9udC1zaXplIjogIjAuNzVyZW0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJOZXZlciBzdWJtaXQgeW91ciBwYXNzd29yZHMgaGVyZSIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICkKICAgIF0pLAogICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogIm10LTQiIH0pLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgWwogICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlBhbmVscyIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXJvdyIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IG1kOiAiNiIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWNhcmQiLAogICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItY2FyZC1oZWFkZXIiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImRhbmdlci1jb2xvciIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiRGFuZ2VyIildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItY2FyZC1ib2R5IiwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlRoaXMgaXMgYSBjYXJkIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBbmQgaGVyZSBjb21lcyBzb21lIHNwZWNpYWwgdGV4dCwganVzdCBmb3IgeW91LiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImRhbmdlciIsIHNpemU6ICJzbSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkdvIHNvbWV3aGVyZSIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWNhcmQtZm9vdGVyIiwKICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICJkYW5nZXItY29sb3IiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibWItMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUGxlYXNlIGVuam95IHRoaXMgZm9vdGVyIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgbWQ6ICI2IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItY2FyZCIsCiAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJtZGItY2FyZC1oZWFkZXIiLCB7IGF0dHJzOiB7IGNvbG9yOiAiaW5kaWdvIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiSW5kaWdvIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItY2FyZC1ib2R5IiwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlRoaXMgaXMgYSBjYXJkIikKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJBbmQgaGVyZSBjb21lcyBzb21lIHNwZWNpYWwgdGV4dCwganVzdCBmb3IgeW91LiIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImluZGlnbyIsIHNpemU6ICJzbSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkdvIHNvbWV3aGVyZSIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1jYXJkLWZvb3RlciIsIHsgYXR0cnM6IHsgY29sb3I6ICJpbmRpZ28iIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibWItMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlBsZWFzZSBlbmpveSB0aGlzIGZvb3RlciIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0sCiAgICAgIDEKICAgICksCiAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCIgfSksCiAgICBfYygKICAgICAgInNlY3Rpb24iLAogICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgIFsKICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJUb29sdGlwcyIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLXJvdyIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItY29sIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbDogIjMiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi10b29sdGlwIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRyaWdnZXI6ICJob3ZlciIsIG9wdGlvbnM6IHsgcGxhY2VtZW50OiAidG9wIiB9IH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidG9vbHRpcCIgfSwgW192bS5fdigiVG9vbHRpcCIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6ICJyZWZlcmVuY2UiLCBjb2xvcjogImluZm8iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJyZWZlcmVuY2UiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9vbHRpcCB0b3AiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sOiAiMyIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLXRvb2x0aXAiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHJpZ2dlcjogImhvdmVyIiwgb3B0aW9uczogeyBwbGFjZW1lbnQ6ICJyaWdodCIgfSB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRvb2x0aXAiIH0sIFtfdm0uX3YoIlRvb2x0aXAiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzbG90OiAicmVmZXJlbmNlIiwgY29sb3I6ICJpbmZvIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBzbG90OiAicmVmZXJlbmNlIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlRvb2x0aXAgcmlnaHQiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sOiAiMyIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLXRvb2x0aXAiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICJob3ZlciIsCiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7IHBsYWNlbWVudDogImJvdHRvbSIgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidG9vbHRpcCIgfSwgW192bS5fdigiVG9vbHRpcCIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6ICJyZWZlcmVuY2UiLCBjb2xvcjogImluZm8iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJyZWZlcmVuY2UiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9vbHRpcCBib3R0b20iKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1jb2wiLAogICAgICAgICAgICAgIHsgYXR0cnM6IHsgY29sOiAiMyIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLXRvb2x0aXAiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHJpZ2dlcjogImhvdmVyIiwgb3B0aW9uczogeyBwbGFjZW1lbnQ6ICJsZWZ0IiB9IH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidG9vbHRpcCIgfSwgW192bS5fdigiVG9vbHRpcCIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6ICJyZWZlcmVuY2UiLCBjb2xvcjogImluZm8iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6ICJyZWZlcmVuY2UiCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9vbHRpcCBsZWZ0IildCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdLAogICAgICAxCiAgICApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}